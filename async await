const husband = {
  gotButter: false,
};

// Promise-based code
function getButter() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      husband.gotButter = true;
      console.log("Husband got butter");
      resolve();
    }, 2000);
  });
}

function getColdDrinks() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log("Got cold drinks");
      resolve("Cold Drinks");
    }, 1000);
  });
}

// Using Promises
getButter()
  .then(() => getColdDrinks())
  .then((drink) => {
    console.log(`Husband got ${drink}`);
  })
  .catch((error) => console.error(`Error: ${error}`));

// Async/Await-based code
async function


const preMovie = async ()=>{
const wifeBringTicket = new Promise((resolve,reject)=>{
setTimeout(()=> resolve('ticket'),3000);
});
const getPopcorn  = new Promise((resolve,reject)=> resolve(`popcorn`));
const getCandy = new Promise((resolve, reject)=>resolve(`candy`));
const getCoke = new Promise((resolve,reject)=>resolve(`coke`));
let ticket
try{
ticket = await wifeBringTicket;
}
catch(e){
ticket = 'sad face';
}
//let popcorn = await getPopcorn;
let [popcorn, candy, coke] = await Promise.all([getPopcorn, getCandy, getCoke])

return ticket;
}
